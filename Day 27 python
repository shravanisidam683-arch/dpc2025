from collections import deque, defaultdict

def shortest_path(V, edges, start, end):
    graph = defaultdict(list)
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)  # Since the graph is undirected

    visited = [False] * V
    queue = deque([(start, 0)])
    visited[start] = True

    while queue:
        node, dist = queue.popleft()
        if node == end:
            return dist
        for neighbor in graph[node]:
            if not visited[neighbor]:
                visited[neighbor] = True
                queue.append((neighbor, dist + 1))
    
    return -1  # No path found

V = 5
edges = [[0, 1], [0, 2], [1, 3], [2, 3], [3, 4]]
start = 0
end = 4

print(shortest_path(V, edges, start, end))  # Output: 3
